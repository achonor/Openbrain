//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EmojiDataConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EmojiDataConfig), typeof(DataReader));
		L.RegFunction("LoadConfig", LoadConfig);
		L.RegFunction("GetDataByID", GetDataByID);
		L.RegFunction("GetAllData", GetAllData);
		L.RegFunction("New", _CreateEmojiDataConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEmojiDataConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EmojiDataConfig obj = new EmojiDataConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EmojiDataConfig.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EmojiDataConfig obj = (EmojiDataConfig)ToLua.CheckObject<EmojiDataConfig>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.LoadConfig(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDataByID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EmojiDataConfig obj = (EmojiDataConfig)ToLua.CheckObject<EmojiDataConfig>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			emoji_data o = obj.GetDataByID(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EmojiDataConfig obj = (EmojiDataConfig)ToLua.CheckObject<EmojiDataConfig>(L, 1);
			emoji_data[] o = obj.GetAllData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, EmojiDataConfig.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

